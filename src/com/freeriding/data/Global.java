/*
 * Copyright Alex Woodhead 2011 - alexatwoodhead@gmail.com
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package com.freeriding.data;

import com.intersys.globals.Connection;
import com.intersys.globals.ConnectionContext;
import com.intersys.globals.LockException;
import com.intersys.globals.NodeReference;

public class Global {
	private String globalName;
	private Subscript[] subscripts;
	private long identity;
	
	
	/// A global name is always defined via a string
	public Global(String globalName, Subscript ...subscripts)
	{
		this.globalName=globalName;
		this.subscripts=subscripts;
	}
	
	
	/// Unless a entity defines a specific 
	/// subscript to use it is assumed that
	/// the entity is one of many that can be stored at
	/// a location
	/// A unique identity node is generated by incrementing 
	/// the corresponding index node
	protected void NewIdentity()
	{
		this.identity=0L;
		NodeReference nodeRef = getNodeReference();
		nodeRef.appendSubscript(0L);
		nodeRef.appendSubscript("id");
		this.identity=nodeRef.increment(1);
	}
	
	protected void setIdentity(long identity)
	{
		// identity must be over 0
		this.identity=new Long(identity);
	}
	protected long getIdentity()
	{
		return this.identity;
	}
	
	public NodeReference getNodeReference()
	{
		Connection connection=ConnectionContext.getConnection();
		NodeReference ret = connection.createNodeReference(globalName);
		for (Subscript item : subscripts)
		{
			item.AppendSubscript(ret);
		}
		if (this.identity>0)
		{
			ret.appendSubscript(identity);
		}
		return ret;
	}
	
	protected boolean AddLock()
	{
		if (identity<1) return false;
		NodeReference nodeReference = getNodeReference();
		if (!nodeReference.exists()) return false;
		try
		{
			nodeReference.acquireLock(NodeReference.EXCLUSIVE_LOCK,
                NodeReference.LOCK_INCREMENTALLY);
			return true;
		}
		catch (LockException e)
		{
			return false;
		}
	}
	protected void RemoveLock()
	{
		NodeReference nodeReference = getNodeReference();
		nodeReference.releaseLock(NodeReference.EXCLUSIVE_LOCK, NodeReference.RELEASE_IMMEDIATELY);
	}
	
	/// Identity must have been previously set
	/// Depending on how values for an entity are stored
	/// there may be child nodes and / or content
	/// stored at the parent node
	protected boolean Exists()
	{
		if (identity<1) return false;
		NodeReference nodeReference = getNodeReference();
		return (nodeReference.exists() || nodeReference.hasSubnodes());
	}
	
	public String toString()
	{
		StringBuilder sb=new StringBuilder();
		sb.append("^");
		sb.append(this.globalName);
		int len=subscripts.length;
		if (len>0)
		{
			sb.append("(");
			for (int i=1;i<len;i++)
			{
				if (i>1) sb.append(',');
				sb.append(this.subscripts[i].toString());
			}
			if (identity>0)
			{
				if (len>0) sb.append(',');
				sb.append(this.identity);
			}
			sb.append(")");
		}
		return sb.toString();
	}
	

}
